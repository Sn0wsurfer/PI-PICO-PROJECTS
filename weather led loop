import urequests as requests
from machine import Pin
from neopixel import Neopixel
import ujson as json
import network
import socket
from time import sleep
import time
from picozero import pico_temp_sensor, pico_led
import machine

# network.hostname("xxxx")
ssid = 'xxxx'
password = 'xxxx'
Hname = "xxxx"


#https://api.openweathermap.org/data/2.5/weather?lat=-41.328&lon=174.805&xxxx
def get_weather_data():    
    weather_url = 'https://api.checkwx.com/metar/NZWN/decoded?x-api-key=xxxx'

    try:
        response = requests.get(weather_url).json()
        # Parse the JSON response
#             weather_data = ujson.loads(response.text)
        json_str = json.dumps(response)
        resp = json.loads(json_str)
        data2 = response.get("data")
        
        json_str = json.dumps(data2)
        resp = json.loads(json_str)
        data3 = (resp[0])
        
        
        json_str = json.dumps(data3)
        resp = json.loads(json_str)
        data4 = data3.get("wind")
        temp4 = data3.get("temperature")
       
        json_str = json.dumps(temp4)
        resp = json.loads(json_str)
        temp5 = temp4.get("celsius")
        
        json_str = json.dumps(data4)
        resp = json.loads(json_str)
        data5 = data4.get("speed_kph")
        data6 = data4.get("gust_kph")
        
        if data6 == None:
            data7 = 0
        else:
            data7 = data6
        
        windno = data5
        wind_gt = data7
        temp = temp5
        
        print(f"Wind Speed: {windno}kph")
        print(f"Wind Gust: {wind_gt}kph")
        print(f"Temperature: {temp}Â°C")
        v_windno = windno
        v_temp = temp
        v_gust = wind_gt
        return [v_windno, v_gust, v_temp]
#         else:
#             print("Failed to fetch weather data")
    except Exception as e:
        print('Error:', e)
        
        
def connect():
    #Connect to WLAN
    wlan = network.hostname(Hname)
    wlan = network.WLAN(network.STA_IF)
    wlan.active(True)
    wlan.connect(ssid, password)
    while wlan.isconnected() == False:
        print('Waiting for connection...')
        sleep(1)
    ip = wlan.ifconfig()[0]
    print(f'Connected on {ip}')
    return ip

def open_socket(ip):
    # Open a socket
    address = (ip, 80)
    connection = socket.socket()
    connection.bind(address)
    connection.listen(1)
    return(connection)

def clear_led():
    numpix = 202
    pixels = Neopixel(numpix, 0, 28, "GRB")
    black = (0, 0, 0)
    pixels.brightness(50)
    pixels.fill(black)
    pixels.show()
    return
    
def color_led(v_windno, v_gust, v_temp):
    numpix = 202
    pixels = Neopixel(numpix, 0, 28, "GRB")
    yellow = (100, 100, 0)
    orange = (255, 50, 0)
    green = (0, 255, 0)
    blue = (0, 0, 255)
    lblue = (51,243,255)
    red = (255, 0, 0)
    pink = (255,25,80)
    Marker = blue
    color0 = red
#     pixels.fill(0,0,0)
    pixels.brightness(50)
    pixels.fill(green)
    pixels.set_pixel_line_gradient(101, v_windno + 100, pink, red)
    pixels.set_pixel_line_gradient(101 + v_windno, 100 + v_gust, yellow, red)
    pixels.set_pixel_line_gradient(0, v_temp * 2, pink, red)
    # pixels.set_pixel_line(1, 16, red)
    # pixels.set_pixel(20, (255, 255, 255))
    pixels.set_pixel(20, Marker)
    pixels.set_pixel(40, Marker)
    pixels.set_pixel(60, Marker)
    pixels.set_pixel(80, Marker)
    pixels.set_pixel(100, Marker)
    pixels.set_pixel(101, (0,0,0))
    pixels.set_pixel(110, Marker)
    pixels.set_pixel(120, Marker)
    pixels.set_pixel(130, Marker)
    pixels.set_pixel(140, Marker)
    pixels.set_pixel(150, Marker)
    pixels.set_pixel(160, Marker)
    pixels.set_pixel(170, Marker)
    pixels.set_pixel(180, Marker)
    pixels.set_pixel(190, Marker)
    pixels.set_pixel(200, Marker)
    pixels.show()
    return


try:
    ip = connect()
    connection = open_socket(ip)
    get_weather_data() 
    while True:
        v_windno, v_gust, v_temp = get_weather_data() 
        color_led(v_windno, v_gust, v_temp) 
        time.sleep(900)
        clear_led()
except KeyboardInterrupt:
    machine.reset()
